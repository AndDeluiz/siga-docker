#!/bin/bash
################################################################################
# @author      Anderson Deluiz <anderson.santos@gpnet.com.br>                  #
# @name        docker-aliases                                                  #
# @version     1.1                                                             #
# @date        Jan 28th, 2015                                                  #
# @description This script helps to execute commom tasks related to docker     #
#              environment used with SIGA application.                         #
#                                                                              #
# @require     N/A                                                             #
#                                                                              #
# @usage       Para carregar os aliases, estando no bash prompt execute:       #
#              # . docker-aliases                                              #
#                                                                              #
################################################################################

#---------------------------     DEBUG OPTIONS    -----------------------------#
# uncomment line(s) to activate debug function
# set -x    # print a trace of simple commands and their arguments
# set -v    # print shell input lines as they are read
# set -n    # read commands but do not execute them

#---------------------------   GLOBAL VARIABLES   -----------------------------#
myHome=/opt/docker/scripts
myName=$(basename $0)
OSName=$(uname -s)
myVersion=$(awk '/^# @version/ {print $3}' $0)
myHostname=$(hostname)
myTempFile=$(mktemp --tmpdir=/tmp ${myName}.XXXXXXXXXXXX)

# Text output modifiers
textBold=$(tput bold)
textReverse=$(tput rev)
textNormal=$(tput sgr0)

#---------------------------        INCLUDE       -----------------------------#
. ${myHome}/$(basename $0).conf

#---------------------------       FUNCTIONS      -----------------------------#

#------------------------------------------------------------------------------#
# @function    usage                                                           #
# @description Displays usage of this script and help messages and exit script.#
#                                                                              #
# @usage       usage                                                           #
# @in          none                                                            #
# @return      none                                                            #
# @return-code                                                                 #
#              none                                                            #
# @exit-code                                                                   #
#              255 - normal exit code                                          #
#------------------------------------------------------------------------------#
usage()
{
   cat << _EOF_
${textBold}
${myName} v${myVersion}

Uso: ${myName} COMANDO [ARGS] 

Provê funções básicas de uso para imagens Docker utilizadas pela aplicação SIGA.

Comandos:
${textNormal}
${textBold}   build <buildType> [buildDirectory]${textNormal}
        Cria uma imagem a partir de um Dockerfile.
        Argumentos:
           buildType - especifica que tipo de imagem sera criada.
              Tipo de imagem:
                 app - Servidor de aplicação JBoss standalone
                 web - Servidor Apache HTTPD
           buildDirectory - diretório onde está localizado o arquivo Dockerfile.

${textBold}   help${textNormal}
        Exibe esta mensagem de utilização do aplicativo.

${textBold}   logs${textNormal}
	Mostra os logs de um contêiner (stdout).

${textBold}   restart${textNormal}
	Reinicia o ambiente Siga Docker, parando e iniciando automaticamente os
	contêineres de aplicação e servidor web na ordem correta.

${textBold}   rm${textNormal}
        Remove contêineres do sistema. Caso o contêiner esteja em execução,
        força a parada do contêiner antes de removê-lo.

${textBold}   rmi <ImageType> [BuildNumber]${textNormal}
        Remove imagem do tipo indicado por ImageType. Caso não seja informado o
        BuildNumber, serão mostradas todas as imagens disponíveis para escolha.
        Argumentos:
           ImageType - especifica que tipo de imagem sera executada.
              Tipo de imagem:
                 app - Servidor de aplicação JBoss standalone
                 web - Servidor Apache HTTPD
           BuildNumber - número de BUILD da imagem que será removida.

${textBold}   run <ImageType> [BuildNumber]${textNormal}
        Executa imagem do tipo indicado por ImageType. Caso não seja informado o
        BuildNumber, será executada a imagem mais recente.
        Argumentos:
           ImageType - especifica que tipo de imagem sera executada.
              Tipo de imagem:
                 app - Servidor de aplicação JBoss standalone
                 web - Servidor Apache HTTPD
           BuildNumber - número de BUILD da imagem que será executada.
	      Default: latest

${textBold}   start${textNormal}
	Inicia o ambiente Siga Docker, iniciando automaticamente os contêineres
	de aplicação e servidor web na ordem correta.
	Se existir no sistema algum contêiner registrado para qualquer um dos
	ambientes válidos e, estando este contêiner parado, ele será iniciado.
	Caso contrário, um novo contêiner será criado.

${textBold}   stop${textNormal}
	Para o ambiente Siga Docker, terminando automaticamente os contêineres
	de aplicação e servidor web na ordem correta.

${textBold}   version${textNormal}
        Exibe somente a versão deste aplicativo.

_EOF_

   rm -f ${myTempFile}
   exit 255
}

#------------------------------------------------------------------------------#
# @function    sigaBuild                                                       #
# @description Builds Docker images and tags them.                             #
#                                                                              #
# @usage       sigaBuild <buildType> [buildDirectory]                          #
# @in          none                                                            #
# @return      none                                                            #
# @return-code                                                                 #
#              0 - success                                                     #
#              1 - Dockerfile file doesn't exist                               #
#              2 - Image build unsuccessful                                    #
# @exit-code                                                                   #
#              none                                                            #
#------------------------------------------------------------------------------#
sigaBuild ()
{
   local -a arrayImages
   local lastBuildNumber buildType buildDirectory

   case $# in
      1)
         buildType=$1
         buildDirectory=${buildDirectoryDefault[${buildType}]}
         ;;
      2)
         buildType=$1
         buildDirectory=$2
         ;;
      *)
         usage
         ;;
   esac

   if [ ! -r ${buildDirectory}/Dockerfile ]
   then
      echo "${textBold}ERROR: File ${buildDirectory}/Dockerfile doesn't exist or doesn't have read permission.${textNormal}"
      return 1
   fi

   # Carrega array com imagens ordenadas do decrescentemente pelo build number.
   # Desta forma, o build mais recente sempre sera o que vira primeiro no array.
   arrayImages=($(docker images siga/${buildType}server | awk '{if (NR != 1) if ($2 ~ /build-[0-9]*/) print $1":"$2}' | sort -r))

   lastBuildNumber=$(cut -d'-' -f 2 <<< ${arrayImages[0]})
   newBuildNumber=$(printf "%05d" $((10#${lastBuildNumber} + 1)))

   echo "Last Build number is: ${textBold}${lastBuildNumber}${textNormal}"
   echo "New Build number will be: ${textBold}${newBuildNumber}${textNormal}"

   echo "Building New Image! Please wait..."
   docker build --tag=siga/${buildType}server:build-${newBuildNumber} --force-rm ${buildDirectory}
   if [ $? -eq 0 ]
   then
      echo
      echo "${textBold}Successfully built image siga/${buildType}server:build-${newBuildNumber}${textNormal}!!!"
      echo 
      docker tag siga/${buildType}server:build-${newBuildNumber} siga/${buildType}server:latest
      if [ $? -eq 0 ]
      then
         echo "${textBold}Image siga/${buildType}server:build-${newBuildNumber} tagged as siga/${buildType}server:latest${textNormal}"
         return 0
      fi
      echo "WARNING: Couldn't tag image ${textBold}siga/${buildType}server:build-${newBuildNumber}${textNormal} as ${textBold}siga/${buildType}server:latest${textNormal}"
      return 0
   fi

   return 2
}

#------------------------------------------------------------------------------#
# @function    sigaRun                                                         #
# @description Runs Docker images in detach (background) mode.                 #
#                                                                              #
# @usage       sigaRun <imageType> [buildNumber] [newEntrypoint]               #
# @in          imageType - type of image to run                                #
#              buildNumber - build number of image. Defaults to "latest"       #
#              newEntrypoint - undocumented argument. Changes entrypoint of    #
#                 image and run in interactive mode.                           #
# @return      none                                                            #
# @return-code Returns return-code from docker execution.                      #
# @exit-code   none                                                            #
#------------------------------------------------------------------------------#
sigaRun()
{
   declare -a arrayImages
   local imageType buildNumber newEntrypoint tempVar linkContainer exposeTCPPorts cmdToRun imageTag attachVol returnCode

   [ $# -lt 1 -o $# -gt 3 ] && usage

   imageType=$1
   buildNumber=$2
   newEntrypoint=$3

   for tempVar in $(tr ',' ' ' <<< ${defaultPorts[${imageType}]})
   do
      exposeTCPPorts="${exposeTCPPorts} -p ${tempVar}:${tempVar}"
   done

   for tempVar in ${volumesToMount[${imageType}]}
   do
      attachVol="${attachVol} -v ${tempVar}"
   done

   for tempVar in ${containerToLink[${imageType}]}
   do
      linkContainer="${linkContainer} --link=${tempVar}"
   done

   cmdToRun="docker run --name=\"siga-${imageType}server\" -h siga-${imageType}server ${exposeTCPPorts} ${attachVol}"

   if [ ${newEntrypoint} ]
   then
      cmdToRun="${cmdToRun} --entrypoint=\"${newEntrypoint}\" -it"
   else
      cmdToRun="${cmdToRun} -d"
   fi

   if [ ${buildNumber} ]
   then
      if [ ${buildNumber} = "latest" ]
      then
         imageTag="${buildNumber}"
      else
         imageTag="build-${buildNumber}"
      fi
   fi

   echo -n "${textBold}Iniciando ambiente SIGA $(tr '[a-z]' '[A-Z]' <<< ${imageType})...${textNormal}"
   ${cmdToRun} ${linkContainer} siga/${imageType}server:${imageTag:-latest} > ${myTempFile} 2>&1
   returnCode=$?
   if [ ${returnCode} -eq 0 ]
   then
      echo "${textBold}OK${textNormal}"
   else
      echo "${textBold}FALHA${textNormal}"
      echo "${textBold}Verifique erro abaixo:${textNormal}"
      cat ${myTempFile}
   fi

   return 0
}

#------------------------------------------------------------------------------#
# @function    sigaRemoveContainer                                             #
# @description Removes a Docker container.                                     #
#                                                                              #
# @usage       sigaRemoveContainer                                             #
# @in          none                                                            #
# @return      none                                                            #
# @return-code                                                                 #
#              0 - Success                                                     #
#              * - exit-code from "docker rm" execution                        #
# @exit-code                                                                   #
#              none                                                            #
#------------------------------------------------------------------------------#
sigaRemoveContainer()
{
   declare -a containerId
   local arrayIndex returnCode highRetCode

   highRetCode=0

   echo
   echo "${textBold}CONTÊINERES REGISTRADOS NO SISTEMA"
   echo "==================================${textNormal}"
   echo
   docker ps -a
   echo
   read -a containerId -t 300 -p "${textBold}Digite o(s) CONTAINER(S) ID(S) que deseja remover (Q = Quit):${textNormal} "

   if [ ${#containerId[@]} -eq 0 ]
   then
      echo
      echo "${textBold}Não foram informados contêineres Docker para remoção!${textNormal}"
      echo
      return 0
   fi

   if [ ${containerId[0]} = "Q" -o ${containerId[0]} = "q" ]
   then
      echo
      echo "${textBold}Saída requisitada pelo usuário.${textNormal}"
      echo
      return 0
   fi

   for ((arrayIndex=0; arrayIndex < ${#containerId[@]}; arrayIndex++))
   do
      echo
      if docker ps -aq | grep "^${containerId[${arrayIndex}]}" > /dev/null 2>&1
      then
         docker rm --force ${containerId[${arrayIndex}]} > /dev/null
         returnCode=$?
         if [ ${returnCode} -eq 0 ]
         then
            echo "Contêiner ${containerId[${arrayIndex}]} removido com sucesso!"
         else
            echo "${textBold}ERRO: Contêiner ${containerId[${arrayIndex}]} não pôde ser removido.${textNormal}"
         fi
         [ ${highRetCode} -lt ${returnCode} ] && highRetCode=${returnCode}
      else
         echo "${textBold}ERRO: Contêiner com ID=${containerId[${arrayIndex}]} inexistente!${textNormal}"
      fi
   done

   return ${highRetCode}
}

#------------------------------------------------------------------------------#
# @function    sigaRemoveImage                                                 #
# @description Removes an image from Docker local repository.                  #
#                                                                              #
# @usage       sigaRemoveImage <imageType> [buildNumber]                       #
# @in          none                                                            #
# @return      none                                                            #
# @return-code                                                                 #
#               0  - Success                                                   #
#              253 - image name not found in local system                      #
#              254 - exit by user request                                      #
#              255 - no image name read from stdin                             #
# @exit-code                                                                   #
#              none                                                            #
#------------------------------------------------------------------------------#
sigaRemoveImage()
{
   local -a arrayImages
   local buildNumber imageTag imageType returnCode

   case $# in
      1)
         imageType=$1
	 ;;
      2)
         imageType=$1
      	 buildNumber=$2
         if [ ${buildNumber} = "latest" ]
         then
            imageTag="${buildNumber}"
         else
            imageTag="build-${buildNumber}"
         fi
         ;;
      *)
         usage
	 ;;
   esac

   if [ ! ${imageTag} ]
   then
      echo
      echo "${textBold}IMAGENS REGISTRADAS NO SISTEMA LOCAL${textNormal} "
      echo "${textBold}====================================${textNormal} "
      echo
      docker images siga/${imageType}server
      echo
      read -a imageTag -t 300 -p "${textBold}Digite o TAG da(s) imagem(ns) que deseja remover (Q = Quit):${textNormal} "
      if [ ! ${imageTag} ]
      then
         echo "${textBold}ERRO: Nenhuma imagem informada pelo usuário!${textNormal}"
         return 255
      fi
      case ${imageTag} in
         "Q"|"q")
	    echo
	    echo "${textBold}Saída requisitada pelo usuário.${textNormal}"
	    echo
	    return 254
	    ;;
      esac
   fi

   if docker images siga/${imageType}server | egrep "siga/${imageType}server[[:space:]]+${imageTag}" > /dev/null 2>&1
   then
      echo -n "Removendo imagem siga/${imageType}server:${imageTag}..."
      docker rmi siga/${imageType}server:${imageTag} > ${myTempFile} 2>&1
      returnCode=$?
      if [ ${returnCode} -eq 0 ]
      then
         echo "OK"
         echo "Imagem siga/${imageType}server:${imageTag} removida com sucesso!"
         if ! docker images siga/${imageType}server | fgrep 'latest' > /dev/null 2>&1
	 then
	    # Refaz ponteiramento de tag latest para último build disponível
	    arrayImages=($(docker images siga/${imageType}server | awk '{if (NR != 1) if ($2 ~ /build-[0-9]*/) print $1":"$2}' | sort -r))
	    lastBuildNumber=$(cut -d'-' -f 2 <<< ${arrayImages[0]})
	    echo -n "Reapontando tag ${textBold}latest${textNormal} para imagem siga/${imageType}server:build-${lastBuildNumber}..."
	    docker tag siga/${imageType}server:build-${lastBuildNumber} siga/${imageType}server:latest > ${myTempFile} 2>&1
	    returnCode=$?
	    if [ ${returnCode} -eq 0 ]
	    then
	       echo "OK"
	    else
	       echo "FALHA"
	       echo "${textBold}Verifique erro abaixo:${textNormal}"
	       cat ${myTempFile}
	    fi
	 fi
	 return ${returnCode}
      else
         echo "FALHA"
         echo "${textBold}Imagem siga/${imageType}server:${imageTag} não pôde ser removida.${textNormal}"
         echo "${textBold}Verifique erro abaixo:${textNormal}"
	 cat ${myTempFile}
	 return ${returnCode}
      fi
   else
      echo
      echo "${textBold}ERRO: Imagem siga/${imageType}server:${imageTag} não pôde ser encontrada no sistema.${textNormal}"
      return 253
   fi
}

#------------------------------------------------------------------------------#
# @function    sigaStart                                                       #
# @description Start SIGA environments marked for automatic start.             #
#                                                                              #
# @usage       sigaStart                                                       #
# @in          none                                                            #
# @return      none                                                            #
# @return-code                                                                 #
#              0 - Success                                                     #
#              * - image name not found in local system                        #
# @exit-code                                                                   #
#              none                                                            #
#------------------------------------------------------------------------------#
sigaStart()
{
   local imageType returnCode containerId runningState

   for imageType in ${startOrder}
   do
      echo
      echo -n "${textBold}Iniciando ambiente SIGA $(tr '[a-z]' '[A-Z]' <<< ${imageType})...${textNormal}"
      containerId=$(docker ps -a | awk '/siga-'${imageType}'server[[:space:]]*$/ {print $1}')
      if [ ${containerId} ]
      then
         runningState=$(docker inspect --format='{{.State.Running}}' ${containerId})
         if ! ${runningState}
	 then
            docker start ${containerId} > ${myTempFile} 2>&1
            returnCode=$?
	 else
	    echo
	    echo
	    echo "${textBold}Ambiente SIGA $(tr '[a-z]' '[A-Z]' <<< ${imageType}) já em execução com ContainerId=${containerId}${textNormal}"
	    continue
	 fi
      else
         sigaRun ${imageType}
         returnCode=$?
      fi

      if [ ${returnCode} -eq 0 ]
      then
         echo "${textBold}OK${textNormal}"
      else
         echo "${textBold}FALHA${textNormal}"
         echo "${textBold}Verifique erro abaixo:${textNormal}"
         cat ${myTempFile}
      fi
   done

   return 0
}

#------------------------------------------------------------------------------#
# @function    sigaStop                                                        #
# @description Stop SIGA environments marked for automatic start in startOrder #
#              variable.                                                       #
#                                                                              #
# @usage       sigaStop                                                        #
# @in          none                                                            #
# @return      none                                                            #
# @return-code                                                                 #
#               0  - Success                                                   #
#              253 - image name not found in local system                      #
#              254 - exit by user request                                      #
#              255 - no image name read from stdin                             #
# @exit-code                                                                   #
#              none                                                            #
#------------------------------------------------------------------------------#
sigaStop()
{
   local imageType returnCode

   for imageType in ${startOrder}
   do
      echo -n "${textBold}Parando ambiente SIGA $(tr '[a-z]' '[A-Z]' <<< ${imageType})...${textNormal}"
      docker stop --time=30 $(docker ps | awk '/siga-'${imageType}'server[[:space:]]*$/ {print $1}') > ${myTempFile} 2>&1
      returnCode=$?
      if [ ${returnCode} -eq 0 ]
      then
         echo "${textBold}OK${textNormal}"
      else
         echo "${textBold}FALHA${textNormal}"
	 echo "${textBold}Verifique erro abaixo:${textNormal}"
	 cat ${myTempFile}
      fi
   done
}

#------------------------------------------------------------------------------#
# @function    sigaLogs                                                        #
# @description Show logs for a running container.                              #
#                                                                              #
# @usage       sigaLogs                                                        #
# @in          none                                                            #
# @return      none                                                            #
# @return-code                                                                 #
#              0 - Success                                                     #
#              * - exit from docker command                                    #
# @exit-code                                                                   #
#              none                                                            #
#------------------------------------------------------------------------------#
sigaLogs()
{
   local containerId returnCode realTimeLog

   highRetCode=0

   echo
   echo "${textBold}CONTÊINERES EM EXECUÇÃO NO SISTEMA"
   echo "==================================${textNormal}"
   echo
   docker ps
   echo
   read -t 300 -p "${textBold}Digite o CONTAINER ID que deseja exibir os logs (Q = Quit):${textNormal} " containerId

   if [ ! ${containerId} ]
   then
      echo
      echo "${textBold}Não foram informados contêineres Docker para exibição!${textNormal}"
      echo
      return 0
   fi

   if [ ${containerId} = "Q" -o ${containerId} = "q" ]
   then
      echo
      echo "${textBold}Saída requisitada pelo usuário.${textNormal}"
      echo
      return 0
   fi

   if docker ps -q | grep "^${containerId}" > /dev/null 2>&1
   then
      read -p "Deseja acompanhar os logs em tempo real (s/N)? " realTimeLog
      case ${realTimeLog} in
         "S"|"s")
	    docker logs --follow ${containerId}
	    return $?
	    ;;
         *)
	    docker logs ${containerId}
	    return $?
	    ;;
      esac
   fi
   
}
#---------------------------     MAIN SECTION     -----------------------------#

if [ $# -eq 0 ]
then
   usage
fi

if [ ${USER} != "root" ]
then
   echo
   echo "Você precisa ser root para executar este programa"
   echo
   exit 127
fi

# Efetua parsing inicial dos comandos passados via prompt
case $1 in
   'build')
      shift
      sigaBuild $@
      rm -f ${myTempFile}
      exit $?
      ;;
   'logs')
      shift
      sigaLogs $@
      rm -f ${myTempFile}
      exit $?
      ;;
   'restart')
      shift
      sigaStop $@
      [ $? -eq 0 ] && sigaStart $@
      rm -f ${myTempFile}
      exit $?
      ;;
   'rm')
      shift
      sigaRemoveContainer $@
      rm -f ${myTempFile}
      exit $?
      ;;
   'rmi')
      shift
      sigaRemoveImage $@
      rm -f ${myTempFile}
      exit $?
      ;;
   'run')
      shift
      sigaRun $@
      rm -f ${myTempFile}
      exit $?
      ;;
   'start')
      shift
      sigaStart $@
      rm -f ${myTempFile}
      exit $?
      ;;
   'stop')
      shift
      sigaStop $@
      rm -f ${myTempFile}
      exit $?
      ;;
   'help')
      usage
      ;;
   'version')
      echo
      echo "${myName} v${myVersion}"
      echo
      rm -f ${myTempFile}
      exit 255
      ;;
   *)
      usage
      ;;
esac

rm -f ${myTempFile}
exit 0
