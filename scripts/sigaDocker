#!/bin/bash
################################################################################
# @author      Anderson Deluiz <anderson.santos@gpnet.com.br>                  #
# @name        docker-aliases                                                  #
# @version     1.0                                                             #
# @date        Jan 5th, 2014                                                   #
# @description Aliases para simplificar o uso de comandos docker.              #
#                                                                              #
# @require     N/A                                                             #
#                                                                              #
# @usage       Para carregar os aliases, estando no bash prompt execute:       #
#              # . docker-aliases                                              #
#                                                                              #
################################################################################

#---------------------------        INCLUDE       -----------------------------#

#---------------------------     DEBUG OPTIONS    -----------------------------#
# uncomment line(s) to activate debug function
# set -x    # print a trace of simple commands and their arguments
# set -v    # print shell input lines as they are read
# set -n    # read commands but do not execute them

#---------------------------   GLOBAL VARIABLES   -----------------------------#
myName=$(basename $0)
OSName=$(uname -s)
myVersion=$(awk '/^# @version/ {print $3}' ${myName})
myHostname=$(hostname)

# Load array of default Dockerfile directories
declare -A buildDirectoryDefault
buildDirectoryDefault[app]=/opt/docker/build/siga-appserver-standalone
buildDirectoryDefault[web]=/opt/docker/build/siga-webserver-standalone

# Load array of default volumes to attach do running containers
# Multiple volumes in an entry must be separated by a space character.
# eg.: array[entry]="/vol1:/vol1:ro /vol2:vol2:rw"
declare -A volumesToMount
volumesToMount[app]="/var/log/jboss/sigadoc:/var/log/jboss/sigadoc:rw"

# Load array of default TCP Ports to map on runnning images
declare -A defaultPorts
defaultPorts[app]=8080,8443,9990
defaultPorts[web]=80,443

# Text output modifiers
textBold=$(tput bold)
textReverse=$(tput rev)
textNormal=$(tput sgr0)

#---------------------------       FUNCTIONS      -----------------------------#

#------------------------------------------------------------------------------#
# @function    usage                                                           #
# @description Displays usage of this script and help messages and exit script.#
#                                                                              #
# @usage       usage                                                           #
# @in          none                                                            #
# @return      none                                                            #
# @return-code                                                                 #
#              none                                                            #
# @exit-code                                                                   #
#              255 - normal exit code                                          #
#------------------------------------------------------------------------------#
usage()
{
   cat << _EOF_
${textBold}
${myName} v${myVersion}

Uso: ${myName} COMANDO [ARGS] 

Provê funções básicas de uso para imagens Docker utilizadas pela aplicação SIGA.

Comandos:
${textNormal}
${textBold}   build <buildType> [buildDirectory]${textNormal}
        Cria uma imagem a partir de um Dockerfile.
        Argumentos:
           buildType - especifica que tipo de imagem sera criada.
              Tipo de imagem:
                 app - Servidor de aplicação JBoss standalone
                 web - Servidor Apache HTTPD
           buildDirectory - diretório onde está localizado o arquivo Dockerfile.

${textBold}   help${textNormal}
        Exibe esta mensagem de utilização do aplicativo.

${textBold}   rm${textNormal}
        Remove contêineres do sistema. Caso o contêiner esteja em execução,
        força a parada do contêiner antes de removê-lo.

${textBold}   rmi <ImageType> [BuildNumber]${textNormal}
        Remove imagem do tipo indicado por ImageType. Caso não seja informado o
        BuildNumber, serão mostradas todas as imagens disponíveis para escolha.
        Argumentos:
           ImageType - especifica que tipo de imagem sera executada.
              Tipo de imagem:
                 app - Servidor de aplicação JBoss standalone
                 web - Servidor Apache HTTPD
           BuildNumber - número de BUILD da imagem que será removida.
                 Default: latest

${textBold}   run <ImageType> [BuildNumber]${textNormal}
        Executa imagem do tipo indicado por ImageType. Caso não seja informado o
        BuildNumber, será executada a imagem mais recente.
        Argumentos:
           ImageType - especifica que tipo de imagem sera executada.
              Tipo de imagem:
                 app - Servidor de aplicação JBoss standalone
                 web - Servidor Apache HTTPD
           BuildNumber - número de BUILD da imagem que será executada.
                 Default: latest

${textBold}   version${textNormal}
        Exibe somente a versão deste aplicativo.

_EOF_

   exit 255
}

#------------------------------------------------------------------------------#
# @function    sigaBuild                                                       #
# @description Builds Docker images and tags them.                             #
#                                                                              #
# @usage       sigaBuild <buildType> [buildDirectory]                          #
# @in          none                                                            #
# @return      none                                                            #
# @return-code                                                                 #
#              none                                                            #
# @exit-code                                                                   #
#              0 - success                                                     #
#------------------------------------------------------------------------------#
sigaBuild ()
{
   local -a arrayImages
   local lastBuildNumber buildType buildDirectory

   case $# in
      1)
         buildType=$1
         buildDirectory=${buildDirectoryDefault[${buildType}]}
         ;;
      2)
         buildType=$1
         buildDirectory=$2
         ;;
      *)
         usage
         ;;
   esac

   if [ ! -r ${buildDirectory}/Dockerfile ]
   then
      echo "${textBold}ERROR: File ${buildDirectory}/Dockerfile doesn't exist or doesn't have read permission.${textNormal}"
      return 1
   fi

   # Carrega array com imagens ordenadas do decrescentemente pelo build number.
   # Desta forma, o build mais recente sempre sera o que vira primeiro no array.
   arrayImages=($(docker images siga/${buildType}server | awk '{if (NR != 1) if ($2 ~ /build-[0-9]*/) print $1":"$2}' | sort -r))

   lastBuildNumber=$(cut -d'-' -f 2 <<< ${arrayImages[0]})
   newBuildNumber=$(printf "%05d" $((lastBuildNumber + 1)))

   echo "Last Build number is: ${textBold}${lastBuildNumber}${textNormal}"
   echo "New Build number will be: ${textBold}${newBuildNumber}${textNormal}"

   echo "Building New Image! Please wait..."
   docker build --tag=siga/${buildType}server:build-${newBuildNumber} --no-cache --force-rm ${buildDirectory}
   if [ $? -eq 0 ]
   then
      echo
      echo "${textBold}Successfully built image siga/${buildType}server:build-${newBuildNumber}${textNormal}!!!"
      echo 
      docker tag siga/${buildType}server:build-${newBuildNumber} siga/${buildType}server:latest
      if [ $? -eq 0 ]
      then
         echo "${textBold}Image siga/${buildType}server:build-${newBuildNumber} tagged as siga/${buildType}server:latest${textNormal}"
         return 0
      fi
      echo "WARNING: Couldn't tag image ${textBold}siga/${buildType}server:build-${newBuildNumber}${textNormal} as ${textBold}siga/${buildType}server:latest${textNormal}"
      return 0
   fi

   return 2
}

#------------------------------------------------------------------------------#
# @function    sigaRun                                                         #
# @description Runs Docker images in detach (background) mode.                 #
#                                                                              #
# @usage       sigaRun <imageType> [buildNumber] [newEntrypoint]               #
# @in          imageType - type of image to run                                #
#              buildNumber - build number of image. Defaults to "latest"       #
#              newEntrypoint - undocumented argument. Changes entrypoint of    #
#                 image and run in interactive mode.                           #
# @return      none                                                            #
# @return-code Returns return-code from docker execution.                      #
# @exit-code   none                                                            #
#------------------------------------------------------------------------------#
sigaRun()
{
   declare -a arrayImages
   local imageType buildNumber newEntrypoint tempPort tempVolume exposeTCPPorts cmdToRun imageTag attachVol

   [ $# -lt 1 -o $# -gt 3 ] && usage

   imageType=$1
   buildNumber=$2
   newEntrypoint=$3

   for tempPort in $(tr ',' ' ' <<< ${defaultPorts[${imageType}]})
   do
      exposeTCPPorts="${exposeTCPPorts} -p ${tempPort}:${tempPort}"
   done

   for tempVolume in ${volumesToMount[${imageType}]}
   do
      attachVol="${attachVol} -v ${tempVolume}"
   done

   cmdToRun="docker run --name=\"siga-${imageType}server\" -h \"siga-${imageType}server\" ${exposeTCPPorts} ${attachVol}"

   if [ ${newEntrypoint} ]
   then
      cmdToRun="${cmdToRun} --entrypoint=\"${newEntrypoint}\" -it"
   else
      cmdToRun="${cmdToRun} -d"
   fi

   if [ ${buildNumber} ]
   then
      if [ ${buildNumber} = "latest" ]
      then
         imageTag="${buildNumber}"
      else
         imageTag="build-${buildNumber}"
      fi
   fi

   case ${imageType} in
      'app')
         ${cmdToRun} siga/${imageType}server:${imageTag:-latest}
         return $?
         ;;

      'web')
         ${cmdToRun} --link=siga-appserver:siga-appserver siga/${imageType}server:${imageTag:-latest}
         return $?
         ;;
      *)
         usage
         ;;
   esac
}

#------------------------------------------------------------------------------#
# @function    sigaRemoveContainer                                             #
# @description Removes a Docker container.                                     #
#                                                                              #
# @usage       sigaRemoveContainer                                             #
# @in          none                                                            #
# @return      none                                                            #
# @return-code                                                                 #
#              none                                                            #
# @exit-code                                                                   #
#              none                                                            #
#------------------------------------------------------------------------------#
sigaRemoveContainer()
{
   declare -a containerId
   local arrayIndex returnCode highRetCode

   highRetCode=0

   echo
   echo "${textBold}CONTÊINERES REGISTRADOS NO SISTEMA"
   echo "==================================${textNormal}"
   echo
   docker ps -a
   echo
   read -a containerId -t 300 -p "${textBold}Digite o(s) CONTAINER(S) ID(S) que deseja remover (Q = Quit):${textNormal} "

   if [ ${#containerId[@]} -eq 0 ]
   then
      echo
      echo "${textBold}Não foram informados contêineres Docker para exibição remoção!${textNormal}"
      echo
      return 0
   fi

   if [ ${containerId[0]} = "Q" -o ${containerId[0]} = "q" ]
   then
      echo
      echo "${textBold}Saída requisitada pelo usuário.${textNormal}"
      echo
      return 0
   fi

   for ((arrayIndex=0; arrayIndex < ${#containerId[@]}; arrayIndex++))
   do
      echo
      if docker ps -aq | grep "^${containerId[${arrayIndex}]}" > /dev/null 2>&1
      then
         docker rm --force ${containerId[${arrayIndex}]} > /dev/null
         returnCode=$?
         if [ ${returnCode} -eq 0 ]
         then
            echo "Contêiner ${containerId[${arrayIndex}]} removido com sucesso!"
         else
            echo "${textBold}ERRO: Contêiner ${containerId[${arrayIndex}]} não pôde ser removido.${textNormal}"
         fi
         [ ${highRetCode} -lt ${returnCode} ] && highRetCode=${returnCode}
      else
         echo "${textBold}ERRO: Contêiner com ID=${containerId[${arrayIndex}]} inexistente!${textNormal}"
      fi
      echo
      return $?
   done

}

#------------------------------------------------------------------------------#
# @function    sigaRemoveImage                                                 #
# @description Builds Docker images and tags them.                             #
#                                                                              #
# @usage       sigaRemoveImage <buildType> [buildDirectory]                    #
# @in          none                                                            #
# @return      none                                                            #
# @return-code                                                                 #
#              none                                                            #
# @exit-code                                                                   #
#              none                                                            #
#------------------------------------------------------------------------------#
sigaRemoveImage()
{
   :
}
#---------------------------     MAIN SECTION     -----------------------------#

if [ $# -eq 0 ]
then
   usage
fi

# Efetua parsing inicial dos comandos passados via prompt
case $1 in
   'build')
      shift
      sigaBuild $@
      exit $?
      ;;
   'rm')
      shift
      sigaRemoveContainer $@
      exit $?
      ;;
   'rmi')
      shift
      sigaRemoveImage $@
      exit $?
      ;;
   'run')
      shift
      sigaRun $@
      exit $?
      ;;
   'help')
      usage
      ;;
   'version')
      echo
      echo "${myName} v${myVersion}"
      echo
      exit 255
      ;;
   *)
      usage
      ;;
esac

exit 0


# Executa conteiners em segundo plano
#
#alias siga-rmi-webserver="docker rmi siga:webserver"
#alias siga-rmi-appserver="docker rmi siga/appserver:latest && docker rmi 10.34.15.71:5000/centos-jboss-02"


################################################################################
# Iniciar aplicacao Siga no conteiner
#
# mkdir -p /var/log/jboss/sigadoc \
#    && cd /opt/jboss/bin \
#    && ./standalone.sh -b 0.0.0.0 -bmanagement 0.0.0.0 -Djboss.home.dir=/opt/jboss -Djboss.server.base.dir=/opt/jboss/sigadoc/ -Djboss.server.log.dir=/var/log/jboss -Djboss.socket.binding.port-offset=0

################################################################################
# Para "attachar" a um conteiner em execucao e sair sem para o conteiner:
#
# 1. "Attachar" ao conteiner com o comando :
#
#    # docker attach --sig-proxy=false NAME
#
# 2. Verificar o que for preciso no conteiner.
#
# 3. Sair do conteiner utilizando CTRL+C.

